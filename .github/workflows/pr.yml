name: PR Plan

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write

concurrency:
  group: pr-plan-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  tofu-plan:
    name: OpenTofu plan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup OpenTofu
        uses: opentofu/setup-opentofu@v1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Validate configuration (syntax only)
        run: |
          tofu init -backend=false -input=false >/dev/null 2>&1 || true
          tofu fmt -check -recursive
          tofu validate

      - name: Generate plan for dev
        id: plans
        shell: bash
        env:
          TFVARS: ${{ secrets.TFVARS }}
          TFVARS_DEV: ${{ secrets.TFVARS_DEV }}
        run: |
          set -euo pipefail
          summary_file="${GITHUB_WORKSPACE}/plan-summary.md"
          echo "## OpenTofu Plan" > "$summary_file"
          echo "Real plans using remote backend and AWS credentials." >> "$summary_file"

          envs=(dev)
          for env in "${envs[@]}"; do
            echo >> "$summary_file"
            echo "### ${env}" >> "$summary_file"
            pushd "environments/${env}" >/dev/null
            # Write tfvars from secrets, prefer env-specific then fallback to TFVARS
            case "$env" in
              dev)
                content="${TFVARS_DEV:-${TFVARS:-}}"
                ;;
            esac
            if [ -n "${content}" ]; then
              printf "%s" "$content" > terraform.tfvars
            fi

            tofu init -input=false -no-color
            set +e
            tofu plan -input=false -lock=false -no-color -out plan.tfplan > plan_raw.txt 2>&1
            status=$?
            set -e
            tofu show -no-color plan.tfplan > plan.txt || true
            popd >/dev/null

            if [ "$status" -ne 0 ]; then
              echo "> Plan failed for ${env}. See logs below." >> "$summary_file"
              echo >> "$summary_file"
              echo '```text' >> "$summary_file"
              sed -n '1,400p' "environments/${env}/plan_raw.txt" >> "$summary_file"
              echo '```' >> "$summary_file"
            else
              echo "<details><summary>Plan for ${env}</summary>" >> "$summary_file"
              echo >> "$summary_file"
              echo '```diff' >> "$summary_file"
              sed -n '1,400p' "environments/${env}/plan.txt" >> "$summary_file"
              echo '```' >> "$summary_file"
              echo "</details>" >> "$summary_file"
            fi
          done

          echo "summary_path=$summary_file" >> "$GITHUB_OUTPUT"

      - name: Upload plan artifacts
        uses: actions/upload-artifact@v4
        with:
          name: tofu-plans
          path: |
            environments/*/plan.txt
            environments/*/plan_raw.txt
          if-no-files-found: warn

      - name: Add plan to job summary
        run: |
          cat "${{ steps.plans.outputs.summary_path }}" >> "$GITHUB_STEP_SUMMARY"

      - name: Comment plan on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        env:
          SUMMARY_PATH: ${{ steps.plans.outputs.summary_path }}
        with:
          script: |
            const fs = require('fs');
            const body = fs.readFileSync(process.env.SUMMARY_PATH, 'utf8');
            const marker = '<!-- tofu-plan-comment -->';
            const finalBody = `${marker}
${body}`;

            const { owner, repo } = context.repo;
            const issue_number = context.issue.number;

            const { data: comments } = await github.rest.issues.listComments({ owner, repo, issue_number, per_page: 100 });
            const existing = comments.find(c => c.user && c.user.type === 'Bot' && c.body && c.body.includes(marker));

            if (existing) {
              await github.rest.issues.updateComment({ owner, repo, comment_id: existing.id, body: finalBody });
            } else {
              await github.rest.issues.createComment({ owner, repo, issue_number, body: finalBody });
            }
